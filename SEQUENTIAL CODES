SEQUENTIAL CODES

//31. D Latch - Dataflow Style
module d_latch (
    input d, clk, 
    output q, qn
);
    assign q = d & clk | q & ~clk;
    assign qn = ~q;
endmodule

// 31. SR Latch - Dataflow Style
module sr_latch (
    input s, r,
    output q, qn
);
    assign q = ~(r | qn);
    assign qn = ~(s | q);
endmodule

// 31. D Latch - Structural Style
module d_latch_structural (
    input d, clk, 
    output q, qn
);
    wire q_int, qn_int;

    sr_latch sr1 (.s(d), .r(~clk), .q(q_int), .qn(qn_int));

    assign q = q_int;
    assign qn = qn_int;
endmodule

// 31. SR Latch - Structural Style
module sr_latch_structural (
    input s, r,
    output q, qn
);
    wire q_int, qn_int;

    nand (q_int, s, qn_int);
    nand (qn_int, r, q_int);

    assign q = q_int;
    assign qn = qn_int;
endmodule

// 32. D Flip-Flop - Dataflow Style
module d_ff (
    input d, clk, reset,
    output reg q
);
    always @(posedge clk or posedge reset) begin
        if (reset)
            q <= 0;
        else
            q <= d;
    end
endmodule

// 32. SR Flip-Flop - Dataflow Style
module sr_ff (
    input s, r, clk, reset,
    output reg q
);
    always @(posedge clk or posedge reset) begin
        if (reset)
            q <= 0;
        else if (s & ~r)
            q <= 1;
        else if (~s & r)
            q <= 0;
    end
endmodule

// 32. JK Flip-Flop - Dataflow Style
module jk_ff (
    input j, k, clk, reset,
    output reg q
);
    always @(posedge clk or posedge reset) begin
        if (reset)
            q <= 0;
        else begin
            case ({j, k})
                2'b00: q <= q;
                2'b01: q <= 0;
                2'b10: q <= 1;
                2'b11: q <= ~q;
            endcase
        end
    end
endmodule

// 32. T Flip-Flop - Dataflow Style
module t_ff (
    input t, clk, reset,
    output reg q
);
    always @(posedge clk or posedge reset) begin
        if (reset)
            q <= 0;
        else if (t)
            q <= ~q;
    end
endmodule

// 32. D Flip-Flop - Structural Style
module d_ff_structural (
    input d, clk, reset,
    output q
);
    wire d_int, q_int, qn_int;
    sr_latch_structural sr1 (.s(d_int), .r(~clk), .q(q_int), .qn(qn_int));
    assign q = q_int;
    assign d_int = d;
endmodule

// 32. SR Flip-Flop - Structural Style
module sr_ff_structural (
    input s, r, clk, reset,
    output q
);
    wire s_int, r_int, q_int, qn_int;
    sr_latch_structural sr1 (.s(s_int), .r(r_int), .q(q_int), .qn(qn_int));
    assign q = q_int;
    assign s_int = s;
    assign r_int = r;
endmodule

// 32. JK Flip-Flop - Structural Style
module jk_ff_structural (
    input j, k, clk, reset,
    output q
);
    wire j_int, k_int, q_int, qn_int;
    sr_latch_structural sr1 (.s(j_int), .r(~clk), .q(q_int), .qn(qn_int));
    assign q = q_int;
    assign j_int = j;
    assign k_int = k;
endmodule

// 32. T Flip-Flop - Structural Style
module t_ff_structural (
    input t, clk, reset,
    output q
);
    wire t_int, q_int, qn_int;
    sr_latch_structural sr1 (.s(t_int), .r(~clk), .q(q_int), .qn(qn_int));
    assign q = q_int;
    assign t_int = t;
endmodule

// 33. Tristate Buffer
module tristate_buffer (
    input d, en, 
    output reg y
);
    always @(*) begin
        if (en)
            y = d;
        else
            y = 1'bz;
    end
endmodule

// 34. Tristate Inverter
module tristate_inverter (
    input d, en, 
    output reg y
);
    always @(*) begin
        if (en)
            y = ~d;
        else
            y = 1'bz;
    end
endmodule

// 35. FFs with Synchronous Reset
module ff_sync_reset (
    input d, clk, reset, 
    output reg q
);
    always @(posedge clk) begin
        if (reset)
            q <= 0;
        else
            q <= d;
    end
endmodule

// 36. FFs with Asynchronous Reset
module ff_async_reset (
    input d, clk, reset, 
    output reg q
);
    always @(posedge clk or posedge reset) begin
        if (reset)
            q <= 0;
        else
            q <= d;
    end
endmodule

// 37. Enabled FFs and Latches
module ff_enabled (
    input d, clk, en, 
    output reg q
);
    always @(posedge clk) begin
        if (en)
            q <= d;
    end
endmodule

// 38. FSM - Non-Overlapping Sequence Detectors - Moore Model
module seq_detector_moore (
    input clk, reset, in,
    output reg out
);
    typedef enum reg [1:0] {S0, S1, S2} state_t;
    state_t state, next_state;

    always @(posedge clk or posedge reset) begin
        if (reset)
            state <= S0;
        else
            state <= next_state;
    end

    always @(*) begin
        case(state)
            S0: next_state = in ? S1 : S0;
            S1: next_state = in ? S1 : S2;
            S2: next_state = in ? S1 : S0;
            default: next_state = S0;
        endcase
    end

    always @(state) begin
        case(state)
            S0: out = 0;
            S1: out = 0;
            S2: out = 1;
            default: out = 0;
        endcase
    end
endmodule

// 39. FSM - Non-Overlapping Sequence Detectors - Mealy Model
module seq_detector_mealy (
    input clk, reset, in,
    output reg out
);
    typedef enum reg [1:0] {S0, S1, S2} state_t;
    state_t state, next_state;

    always @(posedge clk or posedge reset) begin
        if (reset)
            state <= S0;
        else
            state <= next_state;
    end

    always @(*) begin
        case(state)
            S0: next_state = in ? S1 : S0;
            S1: next_state = in ? S1 : S2;
            S2: next_state = in ? S1 : S0;
            default: next_state = S0;
        endcase
    end

    always @(state, in) begin
        case(state)
            S0: out = 0;
            S1: out = 0;
            S2: out = 1;
            default: out = 0;
        endcase
    end
endmodule

// 40. FSM - Overlapping Sequence Detectors - Moore Model
module seq_detector_moore_overlap (
    input clk, reset, in,
    output reg out
);
    typedef enum reg [1:0] {S0, S1, S2} state_t;
    state_t state, next_state;

    always @(posedge clk or posedge reset) begin
        if (reset)
            state <= S0;
        else
            state <= next_state;
    end

    always @(*) begin
        case(state)
            S0: next_state = in ? S1 : S0;
            S1: next_state = in ? S1 : S2;
            S2: next_state = in ? S1 : S0;
            default: next_state = S0;
        endcase
    end

    always @(state) begin
        case(state)
            S0: out = 0;
            S1: out = 0;
            S2: out = 1;
            default: out = 0;
        endcase
    end
endmodule

// 41. FSM - Overlapping Sequence Detectors - Mealy Model
module seq_detector_mealy_overlap (
    input clk, reset, in,
    output reg out
);
    typedef enum reg [1:0] {S0, S1, S2} state_t;
    state_t state, next_state;

    always @(posedge clk or posedge reset) begin
        if (reset)
            state <= S0;
        else
            state <= next_state;
    end

    always @(*) begin
        case(state)
            S0: next_state = in ? S1 : S0;
            S1: next_state = in ? S1 : S2;
            S2: next_state = in ? S1 : S0;
            default: next_state = S0;
        endcase
    end

    always @(state, in) begin
        case(state)
            S0: out = 0;
            S1: out = 0;
            S2: out = 1;
            default: out = 0;
        endcase
    end
endmodule

// 42. Synchronous Up-Down Counter
module up_down_counter (
    input clk, reset, up, 
    output reg [3:0] count
);
    always @(posedge clk or posedge reset) begin
        if (reset)
            count <= 4'b0000;
        else if (up)
            count <= count + 1;
        else
            count <= count - 1;
    end
endmodule

// 43. Synchronous MOD Counter
module mod_counter (
    input clk, reset, 
    output reg [3:0] count
);
    always @(posedge clk or posedge reset) begin
        if (reset)
            count <= 4'b0000;
        else if (count == 4'b1111)
            count <= 4'b0000;
        else
            count <= count + 1;
    end
endmodule

// 44. Ring Counter
module ring_counter (
    input clk, reset, 
    output reg [3:0] count
);
    always @(posedge clk or posedge reset) begin
        if (reset)
            count <= 4'b0001;
        else
            count <= {count[2:0], count[3]};
    end
endmodule

// 45. Asynchronous Counter
module async_counter (
    input clk, reset, 
    output reg [3:0] count
);
    always @(posedge clk or posedge reset) begin
        if (reset)
            count <= 4'b0000;
        else
            count <= count + 1;
    end
endmodule
