// 1. Full Adder – Dataflow Style
module full_adder_dataflow (
    input a, b, cin,
    output sum, cout
);
    assign sum = a ^ b ^ cin;      // Sum is the XOR of a, b, and cin
    assign cout = (a & b) | (b & cin) | (a & cin); // Carry is the OR of ANDs
endmodule

module tb_full_adder_dataflow;
    reg a, b, cin;
    wire sum, cout;

    full_adder_dataflow uut (.a(a), .b(b), .cin(cin), .sum(sum), .cout(cout));

    initial begin
        $monitor("a=%b b=%b cin=%b | sum=%b cout=%b", a, b, cin, sum, cout);

        a = 0; b = 0; cin = 0; #10;
        a = 1; b = 0; cin = 0; #10;
        a = 0; b = 1; cin = 0; #10;
        a = 1; b = 1; cin = 1; #10;

        $stop;
    end
endmodule

// 2. Full Adder – Structural Style
module full_adder_structural (
    input a, b, cin,
    output sum, cout
);
    wire s1, c1, c2;

    xor (s1, a, b);              // XOR for the sum
    xor (sum, s1, cin);          // XOR sum with cin
    and (c1, a, b);              // AND for carry
    and (c2, s1, cin);           // AND for carry
    or  (cout, c1, c2);          // OR to combine carry results
endmodule

module tb_full_adder_structural;
    reg a, b, cin;
    wire sum, cout;

    full_adder_structural uut (.a(a), .b(b), .cin(cin), .sum(sum), .cout(cout));

    initial begin
        $monitor("a=%b b=%b cin=%b | sum=%b cout=%b", a, b, cin, sum, cout);

        a = 0; b = 0; cin = 0; #10;
        a = 1; b = 0; cin = 0; #10;
        a = 0; b = 1; cin = 0; #10;
        a = 1; b = 1; cin = 1; #10;

        $stop;
    end
endmodule

// 3. Full Adder – Using Two Half Adders (Structural Style)
module half_adder (
    input a, b,
    output sum, cout
);
    xor (sum, a, b);
    and (cout, a, b);
endmodule

module full_adder_half_adders (
    input a, b, cin,
    output sum, cout
);
    wire sum1, cout1, cout2;

    half_adder ha1 (.a(a), .b(b), .sum(sum1), .cout(cout1));
    half_adder ha2 (.a(sum1), .b(cin), .sum(sum), .cout(cout2));

    or (cout, cout1, cout2);  // Combine the carry outputs
endmodule

module tb_full_adder_half_adders;
    reg a, b, cin;
    wire sum, cout;

    full_adder_half_adders uut (.a(a), .b(b), .cin(cin), .sum(sum), .cout(cout));

    initial begin
        $monitor("a=%b b=%b cin=%b | sum=%b cout=%b", a, b, cin, sum, cout);

        a = 0; b = 0; cin = 0; #10;
        a = 1; b = 0; cin = 0; #10;
        a = 0; b = 1; cin = 0; #10;
        a = 1; b = 1; cin = 1; #10;

        $stop;
    end
endmodule

// 4. Logic Gates (All Gates)
module logic_gates (
    input a, b,
    output and_out, or_out, xor_out, nand_out, nor_out, xnor_out
);
    assign and_out = a & b;
    assign or_out = a | b;
    assign xor_out = a ^ b;
    assign nand_out = ~(a & b);
    assign nor_out = ~(a | b);
    assign xnor_out = ~(a ^ b);
endmodule

module tb_logic_gates;
    reg a, b;
    wire and_out, or_out, xor_out, nand_out, nor_out, xnor_out;

    logic_gates uut (.a(a), .b(b), .and_out(and_out), .or_out(or_out), .xor_out(xor_out), 
                     .nand_out(nand_out), .nor_out(nor_out), .xnor_out(xnor_out));

    initial begin
        $monitor("a=%b b=%b | AND=%b OR=%b XOR=%b NAND=%b NOR=%b XNOR=%b", 
                 a, b, and_out, or_out, xor_out, nand_out, nor_out, xnor_out);

        a = 0; b = 0; #10;
        a = 1; b = 0; #10;
        a = 0; b = 1; #10;
        a = 1; b = 1; #10;

        $stop;
    end
endmodule

// 5. 4:1 Mux – Dataflow Style
module mux4to1_dataflow (
    input [3:0] d, 
    input [1:0] sel, 
    output y
);
    assign y = (sel == 2'b00) ? d[0] :
               (sel == 2'b01) ? d[1] :
               (sel == 2'b10) ? d[2] :
               d[3]; // Default to d3
endmodule

module tb_mux4to1_dataflow;
    reg [3:0] d;
    reg [1:0] sel;
    wire y;

    mux4to1_dataflow uut (.d(d), .sel(sel), .y(y));

    initial begin
        $monitor("d=%b sel=%b | y=%b", d, sel, y);

        d = 4'b1010; sel = 2'b00; #10;
        d = 4'b1010; sel = 2'b01; #10;
        d = 4'b1010; sel = 2'b10; #10;
        d = 4'b1010; sel = 2'b11; #10;

        $stop;
    end
endmodule

// 6. 4:1 Mux using 2:1 Mux (Structural Style)
module mux2to1 (
    input a, b, sel,
    output y
);
    assign y = (sel) ? b : a;
endmodule

module mux4to1_structural (
    input [3:0] d, 
    input [1:0] sel, 
    output y
);
    wire y0, y1;

    mux2to1 m1 (.a(d[0]), .b(d[1]), .sel(sel[0]), .y(y0));
    mux2to1 m2 (.a(d[2]), .b(d[3]), .sel(sel[0]), .y(y1));
    mux2to1 m3 (.a(y0), .b(y1), .sel(sel[1]), .y(y)); 
endmodule

module tb_mux4to1_structural;
    reg [3:0] d;
    reg [1:0] sel;
    wire y;

    mux4to1_structural uut (.d(d), .sel(sel), .y(y));

    initial begin
        $monitor("d=%b sel=%b | y=%b", d, sel, y);

        d = 4'b1010; sel = 2'b00; #10;
        d = 4'b1010; sel = 2'b01; #10;
        d = 4'b1010; sel = 2'b10; #10;
        d = 4'b1010; sel = 2'b11; #10;

        $stop;
    end
endmodule

// 7. 4:1 Mux Using two level logic (Structural Style)
module mux4to1_two_level (
    input [3:0] d,
    input [1:0] sel,
    output y
);
    wire m1, m2, m3, m4;

    and (m1, ~sel[1], ~sel[0], d[0]);
    and (m2, ~sel[1], sel[0], d[1]);
    and (m3, sel[1], ~sel[0], d[2]);
    and (m4, sel[1], sel[0], d[3]);
    or  (y, m1, m2, m3, m4); 
endmodule

module tb_mux4to1_two_level;
    reg [3:0] d;
    reg [1:0] sel;
    wire y;

    mux4to1_two_level uut (.d(d), .sel(sel), .y(y));

    initial begin
        $monitor("d=%b sel=%b | y=%b", d, sel, y);

        d = 4'b1010; sel = 2'b00; #10;
        d = 4'b1010; sel = 2'b01; #10;
        d = 4'b1010; sel = 2'b10; #10;
        d = 4'b1010; sel = 2'b11; #10;

        $stop;
    end
endmodule

// 8. 2 bits wide 4:1 Mux – Dataflow Style
module mux4to1_dataflow_2bit (
    input [3:0] d, 
    input [1:0] sel, 
    output [1:0] y
);
    assign y = (sel == 2'b00) ? d[1:0] :
               (sel == 2'b01) ? d[3:2] :
               2'b00; // Default to 00
endmodule

module tb_mux4to1_dataflow_2bit;
    reg [3:0] d;
    reg [1:0] sel;
    wire [1:0] y;

    mux4to1_dataflow_2bit uut (.d(d), .sel(sel), .y(y));

    initial begin
        $monitor("d=%b sel=%b | y=%b", d, sel, y);

        d = 4'b1010; sel = 2'b00; #10;
        d = 4'b1010; sel = 2'b01; #10;
        d = 4'b1010; sel = 2'b10; #10;
        d = 4'b1010; sel = 2'b11; #10;

        $stop;
    end
endmodule

// 9. Binary to Gray Code Converter
module binary_to_gray (
    input [3:0] bin,
    output [3:0] gray
);
    assign gray[3] = bin[3];
    assign gray[2] = bin[3] ^ bin[2];
    assign gray[1] = bin[2] ^ bin[1];
    assign gray[0] = bin[1] ^ bin[0];
endmodule

module tb_binary_to_gray;
    reg [3:0] bin;
    wire [3:0] gray;

    binary_to_gray uut (.bin(bin), .gray(gray));

    initial begin
        $monitor("bin=%b | gray=%b", bin, gray);

        bin = 4'b0000; #10;
        bin = 4'b0101; #10;
        bin = 4'b1011; #10;
        bin = 4'b1111; #10;

        $stop;
    end
endmodule

// 10. Gray to Binary Code Converter
module gray_to_binary (
    input [3:0] gray,
    output [3:0] bin
);
    assign bin[3] = gray[3];
    assign bin[2] = gray[3] ^ gray[2];
    assign bin[1] = gray[2] ^ gray[1];
    assign bin[0] = gray[1] ^ gray[0];
endmodule

module tb_gray_to_binary;
    reg [3:0] gray;
    wire [3:0] bin;

    gray_to_binary uut (.gray(gray), .bin(bin));

    initial begin
        $monitor("gray=%b | bin=%b", gray, bin);

        gray = 4'b0000; #10;
        gray = 4'b0101; #10;
        gray = 4'b1011; #10;
        gray = 4'b1111; #10;

        $stop;
    end
endmodule

// 11. Binary to Excess 3 Code Converter
module binary_to_excess3 (
    input [3:0] bin,
    output [3:0] excess3
);
    assign excess3 = bin + 4'b0011;
endmodule

module tb_binary_to_excess3;
    reg [3:0] bin;
    wire [3:0] excess3;

    binary_to_excess3 uut (.bin(bin), .excess3(excess3));

    initial begin
        $monitor("bin=%b | excess3=%b", bin, excess3);

        bin = 4'b0000; #10;
        bin = 4'b0101; #10;
        bin = 4'b1011; #10;
        bin = 4'b1111; #10;

        $stop;
    end
endmodule

// 12. 4-bit Ripple Carry Adder
module ripple_carry_adder (
    input [3:0] a, b,
    input cin,
    output [3:0] sum,
    output cout
);
    wire c1, c2, c3;

    full_adder fa0 (.a(a[0]), .b(b[0]), .cin(cin), .sum(sum[0]), .cout(c1));
    full_adder fa1 (.a(a[1]), .b(b[1]), .cin(c1), .sum(sum[1]), .cout(c2));
    full_adder fa2 (.a(a[2]), .b(b[2]), .cin(c2), .sum(sum[2]), .cout(c3));
    full_adder fa3 (.a(a[3]), .b(b[3]), .cin(c3), .sum(sum[3]), .cout(cout));
endmodule

module tb_ripple_carry_adder;
    reg [3:0] a, b;
    reg cin;
    wire [3:0] sum;
    wire cout;

    ripple_carry_adder uut (.a(a), .b(b), .cin(cin), .sum(sum), .cout(cout));

    initial begin
        $monitor("a=%b b=%b cin=%b | sum=%b cout=%b", a, b, cin, sum, cout);

        a = 4'b0000; b = 4'b0000; cin = 0; #10;
        a = 4'b0101; b = 4'b1011; cin = 0; #10;
        a = 4'b1111; b = 4'b0001; cin = 1; #10;

        $stop;
    end
endmodule

// 13. 4 to 2 Priority Encoder
module priority_encoder (
    input [3:0] in,
    output reg [1:0] out,
    output reg valid
);
    always @(*) begin
        casez (in)
            4'b0001: {out, valid} = {2'b00, 1'b1};
            4'b0010: {out, valid} = {2'b01, 1'b1};
            4'b0100: {out, valid} = {2'b10, 1'b1};
            4'b1000: {out, valid} = {2'b11, 1'b1};
            default: {out, valid} = {2'b00, 1'b0};
        endcase
    end
endmodule

module tb_priority_encoder;
    reg [3:0] in;
    wire [1:0] out;
    wire valid;

    priority_encoder uut (.in(in), .out(out), .valid(valid));

    initial begin
        $monitor("in=%b | out=%b valid=%b", in, out, valid);

        in = 4'b0001; #10;
        in = 4'b0010; #10;
        in = 4'b0100; #10;
        in = 4'b1000; #10;

        $stop;
    end
endmodule

// 14. 8 to 3 Priority Encoder with a valid bit
module priority_encoder_8to3 (
    input [7:0] in,
    output reg [2:0] out,
    output reg valid
);
    always @(*) begin
        casez (in)
            8'b00000001: {out, valid} = {3'b000, 1'b1};
            8'b00000010: {out, valid} = {3'b001, 1'b1};
            8'b00000100: {out, valid} = {3'b010, 1'b1};
            8'b00001000: {out, valid} = {3'b011, 1'b1};
            8'b00010000: {out, valid} = {3'b100, 1'b1};
            8'b00100000: {out, valid} = {3'b101, 1'b1};
            8'b01000000: {out, valid} = {3'b110, 1'b1};
            8'b10000000: {out, valid} = {3'b111, 1'b1};
            default: {out, valid} = {3'b000, 1'b0};
        endcase
    end
endmodule

module tb_priority_encoder_8to3;
    reg [7:0] in;
    wire [2:0] out;
    wire valid;

    priority_encoder_8to3 uut (.in(in), .out(out), .valid(valid));

    initial begin
        $monitor("in=%b | out=%b valid=%b", in, out, valid);

        in = 8'b00000001; #10;
        in = 8'b00000010; #10;
        in = 8'b00000100; #10;
        in = 8'b00001000; #10;

        $stop;
    end
endmodule

// 15. 3 to 8 Decoder
module decoder3to8 (
    input [2:0] in,
    output reg [7:0] out
);
    always @(*) begin
        case (in)
            3'b000: out = 8'b00000001;
            3'b001: out = 8'b00000010;
            3'b010: out = 8'b00000100;
            3'b011: out = 8'b00001000;
            3'b100: out = 8'b00010000;
            3'b101: out = 8'b00100000;
            3'b110: out = 8'b01000000;
            3'b111: out = 8'b10000000;
            default: out = 8'b00000000;
        endcase
    end
endmodule

module tb_decoder3to8;
    reg [2:0] in;
    wire [7:0] out;

    decoder3to8 uut (.in(in), .out(out));

    initial begin
        $monitor("in=%b | out=%b", in, out);

        in = 3'b000; #10;
        in = 3'b001; #10;
        in = 3'b010; #10;
        in = 3'b011; #10;

        $stop;
    end
endmodule

// 16. 2 to 4 Decoder
module decoder2to4 (
    input [1:0] in,
    output reg [3:0] out
);
    always @(*) begin
        case (in)
            2'b00: out = 4'b0001;
            2'b01: out = 4'b0010;
            2'b10: out = 4'b0100;
            2'b11: out = 4'b1000;
            default: out = 4'b0000;
        endcase
    end
endmodule

module tb_decoder2to4;
    reg [1:0] in;
    wire [3:0] out;

    decoder2to4 uut (.in(in), .out(out));

    initial begin
        $monitor("in=%b | out=%b", in, out);

        in = 2'b00; #10;
        in = 2'b01; #10;
        in = 2'b10; #10;
        in = 2'b11; #10;

        $stop;
    end
endmodule

// 17. Hexadecimal Seven-Segment Display Decoder
module hex_to_7seg (
    input [3:0] hex,
    output reg [6:0] seg
);
    always @(*) begin
        case (hex)
            4'b0000: seg = 7'b0111111;  // 0
            4'b0001: seg = 7'b0000110;  // 1
            4'b0010: seg = 7'b1011011;  // 2
            4'b0011: seg = 7'b1001111;  // 3
            4'b0100: seg = 7'b1100110;  // 4
            4'b0101: seg = 7'b1101101;  // 5
            4'b0110: seg = 7'b1111101;  // 6
            4'b0111: seg = 7'b0000111;  // 7
            4'b1000: seg = 7'b1111111;  // 8
            4'b1001: seg = 7'b1101111;  // 9
            4'b1010: seg = 7'b1110111;  // A
            4'b1011: seg = 7'b1111100;  // b
            4'b1100: seg = 7'b0111001;  // C
            4'b1101: seg = 7'b1011110;  // d
            4'b1110: seg = 7'b1111001;  // E
            4'b1111: seg = 7'b1110001;  // F
            default: seg = 7'b0000000;  // Blank
        endcase
    end
endmodule

module tb_hex_to_7seg;
    reg [3:0] hex;
    wire [6:0] seg;

    hex_to_7seg uut (.hex(hex), .seg(seg));

    initial begin
        $monitor("hex=%b | seg=%b", hex, seg);

        hex = 4'b0000; #10;
        hex = 4'b0001; #10;
        hex = 4'b0010; #10;
        hex = 4'b1111; #10;

        $stop;
    end
endmodule

// 18. Full Adder using 4:1 Mux
module full_adder_using_mux (
    input a, b, cin,
    output sum, cout
);
    wire [3:0] d;
    wire [1:0] sel;

    assign d = {a, b, cin, 0}; // Mux data inputs
    assign sel = {a, b};       // Mux selection lines

    mux4to1_dataflow mux (.d(d), .sel(sel), .y(sum));   // Use 4:1 Mux for sum
    assign cout = (a & b) | (b & cin) | (a & cin); // Carry logic
endmodule

module tb_full_adder_using_mux;
    reg a, b, cin;
    wire sum, cout;

    full_adder_using_mux uut (.a(a), .b(b), .cin(cin), .sum(sum), .cout(cout));

    initial begin
        $monitor("a=%b b=%b cin=%b | sum=%b cout=%b", a, b, cin, sum, cout);

        a = 0; b = 0; cin = 0; #10;
        a = 1; b = 0; cin = 0; #10;
        a = 0; b = 1; cin = 0; #10;
        a = 1; b = 1; cin = 1; #10;

        $stop;
    end
endmodule

// 22. Tristate Buffer
module tristate_buffer (
    input a,
    input enable,
    output reg y
);
    always @(*) begin
        if (enable) 
            y = a;
        else
            y = 1'bz; // High impedance when not enabled
    end
endmodule

module tb_tristate_buffer;
    reg a, enable;
    wire y;

    tristate_buffer uut (.a(a), .enable(enable), .y(y));

    initial begin
        $monitor("a=%b enable=%b | y=%b", a, enable, y);

        a = 0; enable = 1; #10;
        a = 1; enable = 0; #10;
        a = 0; enable = 0; #10;
        a = 1; enable = 1; #10;

        $stop;
    end
endmodule

// 23. Binary Multiplier
module binary_multiplier (
    input [3:0] a, b,
    output [7:0] product
);
    assign product = a * b; // Simple binary multiplication
endmodule

module tb_binary_multiplier;
    reg [3:0] a, b;
    wire [7:0] product;

    binary_multiplier uut (.a(a), .b(b), .product(product));

    initial begin
        $monitor("a=%b b=%b | product=%b", a, b, product);

        a = 4'b0001; b = 4'b0011; #10;
        a = 4'b1010; b = 4'b1100; #10;
        a = 4'b1111; b = 4'b1111; #10;
        a = 4'b0101; b = 4'b0110; #10;

        $stop;
    end
endmodule

// 24. Full Adder with 3 to 8 Decoder
module full_adder_with_decoder (
    input a, b, cin,
    output sum, cout, 
    output [7:0] decoder_out
);
    wire [7:0] decoder_in;
    
    assign decoder_in = {a, b, cin, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0}; // Set inputs for 3 to 8 decoder

    // Full Adder Logic
    assign sum = a ^ b ^ cin;
    assign cout = (a & b) | (b & cin) | (a & cin);
    
    // Decoder for the full adder
    decoder3to8 decoder_inst (.in({a, b, cin}), .out(decoder_out));
endmodule

module tb_full_adder_with_decoder;
    reg a, b, cin;
    wire sum, cout;
    wire [7:0] decoder_out;

    full_adder_with_decoder uut (.a(a), .b(b), .cin(cin), .sum(sum), .cout(cout), .decoder_out(decoder_out));

    initial begin
        $monitor("a=%b b=%b cin=%b | sum=%b cout=%b decoder_out=%b", a, b, cin, sum, cout, decoder_out);

        a = 0; b = 0; cin = 0; #10;
        a = 1; b = 0; cin = 1; #10;
        a = 0; b = 1; cin = 0; #10;
        a = 1; b = 1; cin = 1; #10;

        $stop;
    end
endmodule

// 31. D Latch, SR Latch – Dataflow Style, Structural Style
// D Latch – Dataflow Style
module d_latch_dataflow (
    input d, clk,
    output reg q
);
    always @ (clk or d) begin
        if (clk)
            q = d;
    end
endmodule

// SR Latch – Dataflow Style
module sr_latch_dataflow (
    input s, r,
    output reg q, nq
);
    always @ (s or r) begin
        if (s == 1'b1 && r == 1'b0)
            q = 1'b1;
        else if (s == 1'b0 && r == 1'b1)
            q = 1'b0;
        else
            q = q;  // Memory state (no change when both are 0 or both are 1)
    end
    assign nq = ~q;
endmodule

// D Latch – Structural Style
module d_latch_structural (
    input d, clk,
    output q
);
    wire nclk, n_d;
    
    not (nclk, clk);
    not (n_d, d);
    
    and (q, d, clk);
    and (nq, n_d, nclk);
endmodule

// SR Latch – Structural Style
module sr_latch_structural (
    input s, r,
    output q, nq
);
    nor (q, s, nq);
    nor (nq, r, q);
endmodule

// 32. D FF, SR FF, JK FF, T FF – Dataflow Style, Structural Style, Behavioural Style

// D Flip-Flop – Dataflow Style
module d_ff_dataflow (
    input d, clk, reset,
    output reg q
);
    always @(posedge clk or posedge reset) begin
        if (reset)
            q <= 1'b0;
        else
            q <= d;
    end
endmodule

// SR Flip-Flop – Dataflow Style
module sr_ff_dataflow (
    input s, r, clk, reset,
    output reg q
);
    always @(posedge clk or posedge reset) begin
        if (reset)
            q <= 1'b0;
        else if (s && !r)
            q <= 1'b1;
        else if (!s && r)
            q <= 1'b0;
    end
endmodule

// JK Flip-Flop – Dataflow Style
module jk_ff_dataflow (
    input j, k, clk, reset,
    output reg q
);
    always @(posedge clk or posedge reset) begin
        if (reset)
            q <= 1'b0;
        else begin
            case ({j, k})
                2'b00: q <= q;
                2'b01: q <= 1'b0;
                2'b10: q <= 1'b1;
                2'b11: q <= ~q;
            endcase
        end
    end
endmodule

// T Flip-Flop – Dataflow Style
module t_ff_dataflow (
    input t, clk, reset,
    output reg q
);
    always @(posedge clk or posedge reset) begin
        if (reset)
            q <= 1'b0;
        else if (t)
            q <= ~q;
    end
endmodule

// D Flip-Flop – Structural Style
module d_ff_structural (
    input d, clk, reset,
    output q
);
    wire nq, d_int;
    not (nq, d);
    
    and (d_int, d, clk);
    and (nq_int, nq, clk);
    
    nor (q, nq_int, reset);
    nor (nq, d_int, reset);
endmodule

// SR Flip-Flop – Structural Style
module sr_ff_structural (
    input s, r, clk, reset,
    output q
);
    wire nq;
    
    nor (q, s, nq);
    nor (nq, r, q);
endmodule

// JK Flip-Flop – Structural Style
module jk_ff_structural (
    input j, k, clk, reset,
    output q
);
    wire j_int, k_int, q_int, nq_int;
    
    not (j_int, j);
    not (k_int, k);
    
    and (q_int, j, clk);
    and (nq_int, k, clk);
    
    nor (q, q_int, nq_int);
    nor (nq, nq_int, q_int);
endmodule

// T Flip-Flop – Structural Style
module t_ff_structural (
    input t, clk, reset,
    output q
);
    wire t_int, nq_int;
    
    not (t_int, t);
    
    and (q_int, t, clk);
    and (nq_int, t_int, clk);
    
    nor (q, nq_int, reset);
    nor (nq, q_int, reset);
endmodule

// D Flip-Flop – Behavioural Style
module d_ff_behavioural (
    input d, clk, reset,
    output reg q
);
    always @(posedge clk or posedge reset) begin
        if (reset)
            q <= 1'b0;
        else
            q <= d;
    end
endmodule

// SR Flip-Flop – Behavioural Style
module sr_ff_behavioural (
    input s, r, clk, reset,
    output reg q
);
    always @(posedge clk or posedge reset) begin
        if (reset)
            q <= 1'b0;
        else if (s && !r)
            q <= 1'b1;
        else if (!s && r)
            q <= 1'b0;
    end
endmodule

// JK Flip-Flop – Behavioural Style
module jk_ff_behavioural (
    input j, k, clk, reset,
    output reg q
);
    always @(posedge clk or posedge reset) begin
        if (reset)
            q <= 1'b0;
        else begin
            case ({j, k})
                2'b00: q <= q;
                2'b01: q <= 1'b0;
                2'b10: q <= 1'b1;
                2'b11: q <= ~q;
            endcase
        end
    end
endmodule

// T Flip-Flop – Behavioural Style
module t_ff_behavioural (
    input t, clk, reset,
    output reg q
);
    always @(posedge clk or posedge reset) begin
        if (reset)
            q <= 1'b0;
        else if (t)
            q <= ~q;
    end
endmodule

// 33. Tristate Buffer
module tristate_buffer (
    input a, enable,
    output reg y
);
    always @ (*) begin
        if (enable)
            y = a;
        else
            y = 1'bz;  // High impedance when not enabled
    end
endmodule

// 34. Tristate Inverter
module tristate_inverter (
    input a, enable,
    output reg y
);
    always @ (*) begin
        if (enable)
            y = ~a;
        else
            y = 1'bz;  // High impedance when not enabled
    end
endmodule

// 35. FFs with Synchronous Reset
module d_ff_sync_reset (
    input d, clk, reset,
    output reg q
);
    always @(posedge clk) begin
        if (reset)
            q <= 1'b0;
        else
            q <= d;
    end
endmodule

// 36. FFs with Asynchronous Reset
module d_ff_async_reset (
    input d, clk, reset,
    output reg q
);
    always @(posedge clk or posedge reset) begin
        if (reset)
            q <= 1'b0;
        else
            q <= d;
    end
endmodule

// 37. Enabled FFs and Latches
module enabled_ff (
    input d, clk, enable,
    output reg q
);
    always @(posedge clk) begin
        if (enable)
            q <= d;
    end
endmodule

module enabled_latch (
    input d, enable,
    output reg q
);
    always @ (d or enable) begin
        if (enable)
            q = d;
    end
endmodule
